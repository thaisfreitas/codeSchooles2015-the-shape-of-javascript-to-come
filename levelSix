//section 1 - writing promises
export default function getReplies(topicId) {
  return new Promise(function(resolve, reject) {
    _getRepliesForTopic(topicId, function(data) {
      let replies = data.replies;
      if (replies) {
        resolve(replies);
      } else {
        let error = new Error("An error occurred");
        reject(error);
      }
    });
  });
}

//section 1 - catching erros from promises
getReplies(1)
  .then(function(replies) {
    return replies.filter(reply => !reply.isAbuse);
  })
  .then(function(filteredReplies) {
    console.log(filteredReplies);
  })
  .catch(function(error) {
    console.log(error);
  });
  //section 2 - writing a custom iterator object

  let user = {
    name: "sam", totalReplies: 17, isBlocked: false
  };

  user[Symbol.iterator] = function(){

    let properties = Object.keys(this);
    let count = 0;
    let isDone = false;

    let next = () => {
      if(count >= properties.length){
        isDone = true;
      }

      let value = this[properties[count++]];

      return {done: isDone, value};
   ;
    };
    return { next };
  };
  //level 6 - section 3 - generators and for of
  function *topicList(){
    yield "ES2015";
    yield "Semi-colons: good or bad?";
    yield "TypeScript";
  }

  for(let topic of topicList()){
    console.log( topic );
  }
